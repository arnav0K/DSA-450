unordered_map<string,int> mp;
    /*This function returns true if the tree contains 
    a duplicate subtree of size 2 or more else returns false*/
    string solve(Node *root){
        if(root==NULL){
            return "$";
        }
        string s="";
        if(root->left==NULL && root->right==NULL){
            s=to_string(root->data);
            return s;
        }
        s=s+'@'+to_string(root->data);
        s=s+'@'+solve(root->left);
        s=s+'@'+solve(root->right);
        mp[s]++;
        return s;
    }
    int dupSub(Node *root) {
         // code here
         mp.clear();
         solve(root);
         for(auto it:mp){
             if(it.second>=2){
                 string res=it.first;
                 if(res.size()>=2){
                     return  true;
                 }
             }
         }
         return false;
         
    }
};
