//User function Template for C++

class Solution{
    public:
    bool areAnagrams(Node *root1, Node *root2)
    {
        //anagram: each level having same character with same frequency
        //traverse each level and check they are same or not.
        if(root1==NULL && root2 == NULL){
            return true;
        }
        if(root1==NULL || root2==NULL){
            return false;
        }
        //declare queue for level order traversal
        queue<Node *>q1;//for 1st tree
        queue<Node *>q2;//for 2nd tree
        q1.push(root1);
        q2.push(root2);
        while(!q1.empty() && !q2.empty()){
            int size1=q1.size();
            int size2=q2.size();
            if(size1!=size2){
                return false;
            }
            vector<int>level1;
            vector<int>level2;
            while(size1>0){             //store each level in level1
                Node* front=q1.front();
                q1.pop();
                if(front->left){
                    q1.push(front->left);
                }
                if(front->right){
                    q1.push(front->right);
                }
                level1.push_back(front->data);
                size1--;
            }
            while(size2>0){             //store each level in level2
                Node* front=q2.front();
                q2.pop();
                if(front->left){
                    q2.push(front->left);
                }
                if(front->right){
                    q2.push(front->right);
                }
                level2.push_back(front->data);
                size2--;
            }
            //compare level1 and level2
            sort(level1.begin(),level1.end());
            sort(level2.begin(),level2.end());
            for(int i=0;i<level1.size();i++){
                if(level1[i]!=level2[i]){
                    return false;
                }
            }
        }
        return true;
    
    }
};
