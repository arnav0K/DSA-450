class Solution {
public:
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vector<int> adj[N];
	    int p = prerequisites.size();
	    for(int i=0;i<p;i++)
	    {
	        adj[prerequisites[i].second].push_back(prerequisites[i].first);
	    }
	    int V = N;
	    queue<int> qe;
	    vector<int> indegree(V,0);
	    for(int i=0;i<V;i++)
	    {
	        for(auto it: adj[i])
	        indegree[it]++;
	    }
	    for(int i=0;i<V;i++)
	    if(indegree[i]==0)
	    {qe.push(i);}
	    
	    while(!qe.empty())
	    {
	        int x = qe.front();
	        qe.pop();
	        for(auto it: adj[x])
	        {
	            indegree[it]--;
	            if(indegree[it] == 0)
	            qe.push(it);
	        }
	    }
	    for(int i=0;i<V;i++)
	    { 
	        if(indegree[i]!=0)
	            return false;
	    }
	    return true;
	    
	}
};
