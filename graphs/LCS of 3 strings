
int dp[25][25][25];
int solve(string A,string B,string C,int n1,int n2,int n3,int i,int j,int k){
    if(i>=n1 || j>=n2 || k>=n3)return 0;
    if(dp[i][j][k]!=-1)return dp[i][j][k];
    int opt1=solve(A,B,C,n1,n2,n3,i+1,j,k);
     int opt2=solve(A,B,C,n1,n2,n3,i,j+1,k);
      int opt3=solve(A,B,C,n1,n2,n3,i,j,k+1);
      int opt4=0;
      if(A[i]==B[j] && B[j]==C[k]){
          opt4=1+solve(A,B,C,n1,n2,n3,i+1,j+1,k+1);
      }
      return dp[i][j][k]= max({opt1,opt2,opt3,opt4});
}



int LCSof3 (string A, string B, string C, int n1, int n2, int n3)
{
   if(n1==0 || n2==0 || n3==0)return 0;
    memset(dp,-1,sizeof(dp));
    return    solve(A,B,C,n1,n2,n3,0,0,0);
}
