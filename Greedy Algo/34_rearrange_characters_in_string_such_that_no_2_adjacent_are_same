Follow the given steps to solve the problem:

Calculate the frequencies of every character in the input string
If a character with a maximum frequency has a frequency greater than (n + 1) / 2, then return an empty string, as it is not possible to construct a string
Now fill the even index positions with the maximum frequency character, if some even positions are remaining then first fill them with remaining characters
Then fill odd index positions with the remaining characters
Return the constructed string
Below is the implementation of the above approach:


// C code for the above approach
 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
char getMaxCountChar(int count[])
{
    int max = 0;
    char ch;
    for (int i = 0; i < 26; i++) {
        if (count[i] > max) {
            max = count[i];
            ch = 'a' + i;
        }
    }
 
    return ch;
}
 
char* rearrangeString(char S[])
{
    int N = strlen(S);
    if (N == 0)
        return "";
 
    int count[26] = { 0 };
    for (int i = 0; i < N; i++)
        count[S[i] - 'a']++;
 
    char ch_max = getMaxCountChar(count);
    int maxCount = count[ch_max - 'a'];
 
    char* res = malloc(N * sizeof(int));
    int ind = 0;
 
    // check if the result is possible or not
    if (maxCount > (N + 1) / 2)
        return res;
 
    // filling the most frequently occurring char in the
    // even indices
    while (maxCount) {
        res[ind] = ch_max;
        ind = ind + 2;
        maxCount--;
    }
 
    count[ch_max - 'a'] = 0;
 
    // Now filling the other Chars, first
    // filling the even positions and then
    // the odd positions
    for (int i = 0; i < 26; i++) {
 
        while (count[i] > 0) {
 
            ind = (ind >= N) ? 1 : ind;
            res[ind] = 'a' + i;
            ind += 2;
            count[i]--;
        }
    }
 
    return res;
}
 
// Driver's code
int main()
{
    char str[] = { "bbbaa" };
 
    // Function call
    char* res = rearrangeString(str);
    if (res == "")
        printf("Not possible \n");
    else
        printf("%s \n", res);
 
    return 0;
}
Output
babab 
