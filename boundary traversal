void traverseLeft(Node* root, vector<int>&ans){
        //base case
        if(root==NULL || (root->left==NULL && root->right==NULL)){
            return;
        }
        ans.push_back(root->data);
        
        if(root->left){
            traverseLeft(root->left, ans);
        }
        else{
            traverseLeft(root->right,ans);
        }
    }
    
    void leafNode(Node* root, vector<int>&ans){
        //base case
        
        if(root==NULL){
            return;
        }
        if((root->left==NULL && root->right==NULL)){
            ans.push_back(root->data);
            return ;
        }
        
        leafNode(root->left,ans);
        leafNode(root->right,ans);
    }
    
    void traverseRight(Node* root, vector<int>&ans){
        //base case
        if(root==NULL || (root->left==NULL && root->right==NULL)){
            return;
        }
        if(root->right){
            traverseRight(root->right, ans);
        }
        else{
            traverseRight(root->left,ans);
        }
        ans.push_back(root->data);
    }
    
    vector <int> boundary(Node *root)
    {   
        vector<int>ans;
        
        if(root==NULL){
            return ans;
        }
        ans.push_back(root->data);
        
        //left part print/store
        traverseLeft(root->left,ans);
        
        //traverse leaf node
        leafNode(root->left,ans);
        leafNode(root->right,ans);
        
        //traverse right part
        traverseRight(root->right,ans);
    }
};
