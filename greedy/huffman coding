class Node{
    public:
int data;
Node* left;
Node* right;
Node(int d){
    left=NULL;
    right=NULL;
    data=d;
}
};
class cmp{
    public:
   
 bool operator()(Node* a,Node* b){
	    return (a->data>b->data);
	}
};
class Solution
{
	public:
	void preorder(Node* root,string temp,vector<string>&s){
	    if(root==NULL) return ;
	    if(root->left==NULL && root->right==NULL){
	        s.push_back(temp);
	        return ;
	    }
	    preorder(root->left,temp+'0',s);
	    preorder(root->right,temp+'1',s);
	    return ;
	}
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // Code here
priority_queue<Node*,vector<Node*>,cmp>pq;
int n=f.size();
for(int i=0;i<n;i++){
Node *temp=new Node(f[i]);
    pq.push(temp);
}
for(int i=0;i<n-1;i++){
     Node* l=  pq.top();
    int a=pq.top()->data;
    pq.pop();
     Node* r=  pq.top();
    int b=pq.top()->data;
    pq.pop();
     Node* temp=new Node(a+b);
         temp->left=l;
         temp->right=r;
         pq.push(temp);
}
Node* root=pq.top();
string temp="";
vector<string>p;
preorder(root,temp,p);
return p;
		}
};
