// User function Template for C++

class Solution{
public:
    
    bool isSafe(int row, int col , int n, vector<string>&board){
    int setcol = col;
    int setrow = row;
    while(row>=0 && col>=0){
        if(board[row][col] == 'Q'){
            return false;
        }
        row--;
        col--;
    }

    col = setcol;
    row = setrow;

    while(col>=0){
        if(board[row][col]== 'Q'){
            return false;
        }
        col--;
    }

    col = setcol;
    row = setrow;
    while(row<n && col>=0){
        if(board[row][col] == 'Q'){
            return false;
        }
        row++;
        col--;
    }
    return true;
}
    void helper(int col , int n, vector<string> &board,vector<vector<int>> &ans, vector<int>&ds ){
    if(col == n){
        ans.push_back(ds);
        return ;
    }

    for(int row = 0; row<n; row++ ){
        if(isSafe(row, col , n, board)){
            board[row][col] = 'Q';
            ds.push_back(row+1);
            helper(col+1, n, board, ans,ds);
            board[row][col] = '*';
            ds.pop_back();
        }
    }
}
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> ans;
        vector<string>board(n);
        string s(n, '*');
        for(int i =0; i<n; i++){
            board[i] = s;
        }
        int col =0;
        vector<int>ds;
        helper(col, n, board, ans, ds);
        sort(ans.begin(), ans.end());
        return ans;
    }
};
