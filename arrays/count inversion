class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[],long long temp[], long long l,long long m, long long r)
    {
        long long int inv_count=0;
        long long leftindex=l;
        long long rightindex=m;
        long long k=l;
       while(leftindex<m && rightindex<=r)
       {
           if(arr[leftindex]<=arr[rightindex])
            {
                temp[k++]=arr[leftindex++];
                
            }
            else
            {
                temp[k++]=arr[rightindex++];
                inv_count+=m-leftindex;
            }
       }
        while(leftindex<m)
        {
            temp[k++]=arr[leftindex++];
        }
        
        while(rightindex<=r)
        {
            temp[k++]=arr[rightindex++];
        }
        
        for(leftindex=l;leftindex<=r;leftindex++)
            {
                arr[leftindex]=temp[leftindex];
            }
        return inv_count;
        
    }
    long long int mergeSort(long long arr[],long long temp[], long long l,long long r)
    {   
        long long m;
        long long int inv_count=0;
        if(r>l)
        {
        m=(l+r)/2;
           inv_count+=mergeSort(arr,temp,l,m);
           inv_count+=mergeSort(arr,temp,m+1,r);
           inv_count+=merge(arr,temp,l,m+1,r);
        }
        return inv_count;
    }
    long long int _mergeSort(long long arr[], long long N)
    {
        long long temp[N];
        return mergeSort(arr,temp,0,N-1);
    }
    long long int inversionCount(long long arr[], long long N)
    {
       return _mergeSort(arr,N);
    }

};
