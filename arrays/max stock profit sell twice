int helper(int i,int n,vector<int>&price,int buy,int limit,vector<vector<vector<int>>> &dp)
{
    if(i==n)
    {
        return 0;
    }
    if(limit==0)
    {
        return 0;
    }
    
    if(dp[i][buy][limit]!=-1)
    {
        return dp[i][buy][limit];
    }
    
    int profit=0;
    if(buy)
    {
        int buyKaro=-price[i]+helper(i+1,n,price,0,limit,dp);
        int skipKaro=0+helper(i+1,n,price,1,limit,dp);
        profit=max(buyKaro,skipKaro);
    }
    else
    {
        int sellKaro=price[i]+helper(i+1,n,price,1,limit-1,dp);
        int skipKaro=0+helper(i+1,n,price,0,limit,dp);
        profit=max(sellKaro,skipKaro);
    }
    return dp[i][buy][limit]=profit;
}

int helpTab(vector<int>&price)
{
    int n=price.size();
    vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,0)));
    for(int i=n-1;i>=0;i--)
    {
        for(int buy=0;buy<=1;buy++)
        {
            for(int limit=1;limit<=2;limit++)
            {
                int profit=0;
                if(buy)
                {
                    int buyKaro=-price[i]+dp[i+1][0][limit];
                    int skipKaro=0+dp[i+1][1][limit];
                    profit=max(buyKaro,skipKaro);
                }
                else
                {
                    int sellKaro=price[i]+dp[i+1][1][limit-1];
                    int skipKaro=0+dp[i+1][0][limit];
                    profit=max(sellKaro,skipKaro);
                }
                dp[i][buy][limit]=profit;
            }
        }
    }
    return dp[0][1][2];
    
}

int maxProfit(vector<int>&price){
    //Write your code here..
    // int n=price.size();
    // vector<vector<vector<int>>> dp(n+1,vector<vector<int>>(2,vector<int>(3,-1)));
    // return helper(0,n,price,1,2,dp);
    return helpTab(price);
}
