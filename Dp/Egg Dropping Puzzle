class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    int dp[205][205];
    int solve(int e, int f){
        if(e==1) return f;
        if(f==1||f==0) return f;
        if(dp[e][f]!=-1) return dp[e][f];
        int mini=INT_MAX;
        for(int k=0;k<f;k++){
            int temp=1+max(solve(e-1,k),solve(e,f-k-1));
            mini=min(mini,temp);
        }
        return dp[e][f]= mini;
    }
    int eggDrop(int n, int k) 
    {
        // your code here
        memset(dp,-1,sizeof(dp));
        return solve(n,k);
    }
//     int solve(int e, int f){
         
//       if(e==1) return f;
//       if(f==1||f==0) return f;
//       if(dp[e][f]!=-1) return dp[e][f];
//      int mini=INT_MAX;
//       for(int k=1;k<=f;k++){
//             int temp= 1+ max(solve(e-1,k-1),solve(e,f-k));
//             mini=min(mini,temp);
//       }
//       return dp[e][f]=mini;

//   }
};
