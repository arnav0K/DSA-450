Optimal Strategy For A Game
https://www.youtube.com/watch?v=VwjKZQCaTC8
class Solution{
    public:
    // Memoization
    int f(int i,int j,int n,int arr[],vector<vector<long long>> &dp){
        if(i>j) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
        int takef=arr[i]+min(f(i+2,j,n,arr,dp),f(i+1,j-1,n,arr,dp));
        int takel=arr[j]+min(f(i+1,j-1,n,arr,dp),f(i,j-2,n,arr,dp));
        return dp[i][j]=max(takef,takel);
    }
    
    long long maximumAmount(int arr[], int n){
        // Your code here
        // vector<vector<long long>> dp(n,vector<long long>(n,-1));
        // return f(0,n-1,n,arr,dp);
        // Tabulation
        vector<vector<long long>> dp(n,vector<long long>(n,0));
        for(int i=0;i<n;i++){
            for(int j=i;j>=0;j--){
                if(i==j) dp[j][i]=arr[i];
                else if(i-j==1) dp[j][i]=max(arr[i],arr[j]);
                else{
                    dp[j][i]=max(arr[j]+min(dp[j+2][i],dp[j+1][i-1]),arr[i]+min(dp[j+1][i-1],dp[j][i-2]));
                }
            }
        }
        return dp[0][n-1];
    }
};
