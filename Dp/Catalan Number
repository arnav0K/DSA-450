class Solution {
public:

    int solve(int n){
        if(n <= 1)
            return 1;

        int ans = 0;

        // think i as root nodes
        for(int i=1; i<=n; i++){
            ans += solve(i-1) * solve(n-i);
        }

        return ans;
    }

    int solveMem(int n, vector<int> &dp){
        if(n <= 1)
            return 1;

        if(dp[n] != -1)
            return dp[n];

        int ans = 0;

        // think i as root nodes
        for(int i=1; i<=n; i++){
            ans += solveMem(i-1, dp) * solveMem(n-i, dp);
        }

        return dp[n] = ans;
    }

    int solveTab(int n){

        vector<int> dp(n+1, 0);

        dp[0] = 1;
        dp[1] = 1;

        // i -> number of nodes
        for(int i=2; i<=n; i++){

            // j -> root node
            for(int j=1; j<=i; j++){
                dp[i] += dp[j-1] * dp[i-j];
            }
        }

        return dp[n];
    }

    long long int fact(int n){
        if(n == 0 || n == 1)
            return 1;

        else
            return n * fact(n-1); /// It is giving a runtime error as :--> runtime error: signed integer overflow: 21 *                                         2432902008176640000 cannot be represented in type 'long long'
    }

    int solveSpaceOP(int n){

        return (fact(2*n)/ ( fact(n+1) * fact(n) ) );
    }

    int numTrees(int n) {

        // RECURSION
        // return solve(n);

        // RECURSION + MEMOIZATION
        /*
        vector<int> dp(n+1, -1);
        return solveMem(n, dp);
        */

        // TABULATION
        // return solveTab(n);

        // SPACE OPTIMIZATION
        return solveSpaceOP(n);
    }
};
