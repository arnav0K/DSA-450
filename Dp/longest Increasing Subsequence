

class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    // int solve(int n,int a[],int curr,int prev,vector<vector<int>>&dp){
    //     if(curr==n)return 0;
        
    //     if(dp[curr][prev+1]!=-1)return dp[curr][prev+1];
        
    //     int inc=0;
    //     if(prev==-1 || a[curr] > a[prev]){
    //         inc= 1 + solve(n,a,curr+1,curr,dp);
    //     }
    //     int exc=0 + solve(n,a,curr+1,prev,dp);
    //     // return max(inc,exc);
    //     dp[curr][prev+1]=max(inc,exc);
    //     return dp[curr][prev+1];
    // }
    int solve(int n,int a[]){
        if(n==0)return 0;
        vector<int>ans;
        ans.push_back(a[0]);
        for(int i=1; i<n; i++){
            if(a[i]>ans.back()){
                ans.push_back(a[i]);
             }
            else{
              int idx=lower_bound(ans.begin(),ans.end(),a[i])-ans.begin();
              ans[idx]=a[i];
            }
        }
        return ans.size();
    }
    int longestSubsequence(int n, int a[])
    {
       // your code here
    //   vector<vector<int>>dp(n,vector<int>(n+1,-1));
    //   return solve(n,a,0,-1,dp);
    
    return solve(n,a);
    }
};
